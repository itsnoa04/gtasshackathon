import Head from "next/head";
import Image from "next/image";

import { zodResolver } from "@hookform/resolvers/zod";

// import { api } from "~/utils/api";
import logo from "~/assets/logo.png";
import { Button } from "~/components/ui/button";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "~/components/ui/alert-dialog";
import * as z from "zod";
import { useForm } from "react-hook-form";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "~/components/ui/form";
import { Input } from "~/components/ui/input";
import { Textarea } from "~/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "~/components/ui/select";
import { api } from "~/utils/api";
import { useEffect, useState } from "react";
import { useToast } from "~/components/ui/use-toast";
import { Badge } from "~/components/ui/badge";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "~/components/ui/popover";

export default function Home() {
  return (
    <>
      <Head>
        <title>Hackathon Project</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex min-h-screen flex-col items-center justify-center">
        <div className="absolute left-0 top-0 p-10">
          <Image src={logo} height={100} width={100} alt="" />
        </div>
        <TaskTeamTable />
      </main>
    </>
  );
}

const TaskTeamTable = () => {
  const { data: teams, isLoading: isTeamsLoading } = api.team.getAll.useQuery();
  return (
    <div className=" flex w-[70vw] flex-col gap-5 ">
      <div className="rounded-2xl bg-slate-500">
        {isTeamsLoading ? (
          <div>Loading...</div>
        ) : (
          teams?.map((team) => (
            <TeamTaskCard
              key={team.id}
              userId={team.id}
              userName={team.name}
              skill={team.skill}
              tasks={team.tasks.map((task) => {
                return {
                  id: task.id,
                  name: task.name,
                  description: task.description,
                  skill: task.skill_required,
                };
              })}
            />
          ))
        )}
      </div>
      <div className="flex justify-center gap-5 ">
        <AddTask />
        <AddTeam />
      </div>
    </div>
  );
};

const taskFormSchema = z.object({
  taskName: z.string(),
  taskDescription: z.string(),
  taskSkill: z.string(),
});

const teamFormSchema = z.object({
  name: z.string(),
  skill: z.string(),
});

const AddTeam = () => {
  const [isClient, setIsClient] = useState(false);

  useEffect(() => {
    setIsClient(true);
  }, []);
  return (
    <AlertDialog>
      <Button className="bg-slate-600">
        <AlertDialogTrigger>Add New User</AlertDialogTrigger>
      </Button>
      <AlertDialogContent>
        <AddTeamForm />
      </AlertDialogContent>
    </AlertDialog>
  );
};

const AddTask = () => {
  return (
    <AlertDialog>
      <Button className="bg-slate-600">
        <AlertDialogTrigger>Add New Task</AlertDialogTrigger>
      </Button>
      <AlertDialogContent>
        <AddTaskForm />
      </AlertDialogContent>
    </AlertDialog>
  );
};

const AddTaskForm = () => {
  const { toast } = useToast();
  const { data: skills, isLoading: isSkillsLoading } =
    api.skills.getAll.useQuery();

  const ctx = api.useUtils();

  const { mutate: assignTask } = api.task.create.useMutation({
    onSuccess: () => {
      toast({
        title: "Task Assigned",
        description: "Task has been assigned",
      });
      void ctx.task.getByAssignedTo.invalidate();
    },

    onError: ({ message }) => {
      toast({
        title: "Error",
        description: message || "Error assigning task",
      });
    },
  });

  const form = useForm<z.infer<typeof taskFormSchema>>({
    resolver: zodResolver(taskFormSchema),
  });

  const onSubmit = async (values: z.infer<typeof taskFormSchema>) => {
    assignTask({
      taskName: values.taskName,
      taskDescription: values.taskDescription,
      skillRequired: values.taskSkill,
    });
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <div className="space-y-4">
          <FormField
            control={form.control}
            name="taskName"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Task Name</FormLabel>
                <FormControl>
                  <Input placeholder="Find Nemo" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="taskDescription"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Task Description</FormLabel>
                <FormControl>
                  <Textarea
                    placeholder="Find Nemo, a young clownfish who has been captured by a scuba diver and taken to a dentist's office aquarium."
                    className="resize-none"
                    {...field}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="taskSkill"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Skill Required</FormLabel>
                <Select
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                >
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="Select a skill" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    {isSkillsLoading ? (
                      <SelectItem value="Loading">Loading...</SelectItem>
                    ) : (
                      skills?.map((skill) => (
                        <SelectItem key={skill} value={skill}>
                          {skill}
                        </SelectItem>
                      ))
                    )}
                  </SelectContent>
                </Select>
                <FormDescription>
                  Skill required to complete the task
                </FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        <div className="flex gap-3">
          <AlertDialogAction type="submit" className="bg-slate-600">
            Assign Task
          </AlertDialogAction>
          <AlertDialogCancel>Cancel</AlertDialogCancel>
        </div>
      </form>
    </Form>
  );
};

const AddTeamForm = () => {
  const { toast } = useToast();

  const { data: skills, isLoading: isSkillsLoading } =
    api.skills.getAll.useQuery();

  const ctx = api.useUtils();

  const { mutate: createTeamUser } = api.team.create.useMutation({
    onSuccess: () => {
      toast({
        title: "User Added",
        description: "User has been added to the team",
      });
      void ctx.team.getAll.invalidate();
    },

    onError: () => {
      toast({
        title: "Error",
        description: "Error adding user to the team",
      });
    },
  });

  const form = useForm<z.infer<typeof teamFormSchema>>({
    resolver: zodResolver(teamFormSchema),
  });

  const onSubmit = async (values: z.infer<typeof teamFormSchema>) => {
    createTeamUser(values);
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <div className="space-y-4">
          <FormField
            control={form.control}
            name="name"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Name</FormLabel>
                <FormControl>
                  <Input placeholder="Yoda" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="skill"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Skill</FormLabel>
                <Select
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                >
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="Select a skill" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    {isSkillsLoading ? (
                      <SelectItem value="Loading">Loading...</SelectItem>
                    ) : (
                      skills?.map((skill) => (
                        <SelectItem key={skill} value={skill}>
                          {skill}
                        </SelectItem>
                      ))
                    )}
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        <div className="flex gap-3">
          <AlertDialogAction type="submit" className="bg-slate-600">
            Add User
          </AlertDialogAction>
          <AlertDialogCancel>Cancel</AlertDialogCancel>
        </div>
      </form>
    </Form>
  );
};

interface Task {
  id: number;
  name: string;
  description: string;
  skill: string;
}

const TeamTaskCard = ({
  userName,
  skill,
  userId,
  tasks,
}: {
  userId: number;
  userName: string;
  skill: string;
  tasks: Task[];
}) => {
  const { data: tasksData, isLoading: isTasksLoading } =
    api.task.getByAssignedTo.useQuery(userId);
  return (
    <div className="flex">
      <UserCard userName={userName} skill={skill} userId={userId} />
      <div className="m-0 flex w-full">
        {isTasksLoading ? (
          <div>Loading...</div>
        ) : (
          tasksData?.map((task) => (
            <TaskCard
              key={task.id}
              name={task.name}
              description={task.description}
              id={task.id}
              skill={task.skill_required}
            />
          ))
        )}
      </div>
    </div>
  );
};

const UserCard = ({
  userName,
  userId,
  skill,
}: {
  userName: string;
  userId: number;
  skill: string;
}) => {
  const { toast } = useToast();
  const ctx = api.useUtils();
  const { mutate: deleteUser } = api.team.deleteUser.useMutation({
    onSuccess: () => {
      toast({
        title: "User Deleted",
        description: "User has been deleted successfully!",
      });
      void ctx.team.getAll.invalidate();
    },

    onError: () => {
      toast({
        title: "Error",
        description: "Error deleting user",
      });
    },
  });

  return (
    <Popover>
      <PopoverTrigger>
        <div className=" relative m-2 flex flex-col items-center justify-center gap-3 rounded-xl bg-slate-300 p-7 pb-1 pl-3">
          <div className="flex items-center justify-center">
            <Image src={logo} height={100} width={100} alt="" />
            <div className="flex flex-col items-start space-y-2">
              <h2 className="text-left font-bold capitalize">{userName}</h2>
              <Badge>{skill}</Badge>
            </div>
          </div>
          <p className="text-xs">Click For Options</p>
        </div>
      </PopoverTrigger>
      <PopoverContent className="flex">
        <AlertDialog>
          <AlertDialogTrigger className="w-full">
            <Button className="w-full bg-red-600 hover:bg-red-800">
              Remove User
            </Button>
          </AlertDialogTrigger>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
              <AlertDialogDescription>
                This action cannot be undone. This will permanently delete this
                user.
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <AlertDialogCancel>Go Back</AlertDialogCancel>
              <AlertDialogAction
                className=" bg-red-600 hover:bg-red-800"
                onClick={() => {
                  deleteUser({
                    id: userId,
                  });
                }}
              >
                I Understand
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      </PopoverContent>
    </Popover>
  );
};

const TaskCard = ({ name, description }: Task) => {
  return (
    <div className="mx-2.5 my-5 flex w-[10vw] min-w-[10vw] flex-col items-start gap-5 rounded-xl bg-white p-5">
      <h2 className="text-xl font-bold">{name}</h2>
      <p className="text-md font-normal">
        {description.length > 100
          ? description.slice(0, 100) + "..."
          : description}
      </p>
    </div>
  );
};
